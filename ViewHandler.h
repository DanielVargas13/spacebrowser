#ifndef VIEWHANDLER_H_
#define VIEWHANDLER_H_

#ifndef TEST_BUILD
#include <ContentFilter.h>
#else
class ViewHandler_test;
#include <test/ViewHandler_test_mock.h>
#endif

#include <BasicDownloader.h>
#include <db/Backend.h>
#include <TabModel.h>
#include <TreeToListProxyModel.h>

#include <QLoggingCategory>
#include <QObject>
#include <QQuickItem>
#include <QQuickView>
#include <QQuickWebEngineProfile>
#include <QStandardItemModel>

#include <map>
#include <memory>
#include <mutex>
#include <vector>

class Tab;
class QQuickWebEngineHistory;

/**
 * Class that handles tab tree structure and WebEngineView objects associated with tabs
 * View ID used in here is the same id as generated by database via Tabs object
 */
class ViewHandler : public QObject
{
    Q_OBJECT

public:
    /**
     * Creates ViewHandler object
     * @param _qView shared pointer to the main window QQuickView object
     * @param _dbBack reference to database backend object
     */
    ViewHandler(std::shared_ptr<QQuickView> _qView, db::Backend& _dbBack);

    virtual ~ViewHandler();

public slots:

    /**
     * Initializes ViewHandler. This function should be called after at least one
     * database connection is established. Can be called multiple times, e.g. when
     * new database connection is established, or some connection was lost.
     */
    bool init();

    /**
     * Show database configuration dialog
     */
    void openDbConfig();

    /**
     * Show view allowing modification of script blocking rules for site opened
     * in selected tab
     * @param dbName name of database backend containing view
     * @param viewId id of tab / view for which list of blocked script sources will be shown
     */
    void openScriptBlockingView(QString dbName, int viewId);

    /**
     * Enter fullscreen mode
     * @param fullscreen If true application will enter fullscreen mode, if false - the opposite
     */
    void showFullscreen(bool fullscreen = true);

    /**
     * Creates DbGroup, tab models and adds new panel
     * @param dbName name of database backend
     */
    void dbConnected(QString dbName, QString schemaName);

    /**
     * Select panel by name of database backend
     * @param dbName name of database backend
     */
    void selectPanel(QString dbName);

    /**
     * Updates icon displayed on panel selection button
     * @param dbName name of database backend
     * @param iconPath path to the icon file
     */
    void updatePanelIcon(QString dbName, QString iconPath);
    /**
     * Opens icon selection dialog. Emits iconSelected signal when accepted.
     */
    void iconRequestedDialog();

    // deprecated, does not work
    void historyUpdated(int _viewId, QQuickWebEngineHistory* navHistory);

signals:
    /**
     * Emitted after icon is selected through iconRequestDialog()
     */
    void iconSelected(QVariant icon);

private:
    const QString addDbText = "Add DB";
#ifndef TEST_BUILD
    QQuickItem* scriptBlockingView;      /// Pointer to ScriptBlockingView QML object
    QQuickItem* webViewContainer;        /// Pointer to WebViewContainer QML object
#else
    friend ViewHandler_test;
    db::Tabs_mock tabsDb;
    db::Config_mock configDb;
    db::ScriptBlock_mock sBlockDb;
    QQuickItem_mock* webViewContainer;
    QQuickItem_mock* tabSelector;
    QQuickItem_mock* scriptBlockingView;
#endif

    std::shared_ptr<QQuickView> qView;                       /// Smart pointer to main window object
    db::Backend& dbBack;                                     /// Reference to database backend object
    std::map<QString, std::shared_ptr<TabModel>> tabsModels; /// Tree model for holding tab related data
                                                             /// (no TreeView yet available)
    std::map<QString, std::shared_ptr<QQuickWebEngineProfile>> webProfiles;/// Each db backend needs separate
                                                                           /// profile to correctly do script filtering
    std::map<QString, std::shared_ptr<ContentFilter>> contentFilters;      /// Filtering classes for each db backend
    BasicDownloader bd;

    QStandardItemModel panelModel;


    void createWebProfile(QString dbName);                   /// Creates profile object, sets up content filter on it
};

#endif /* VIEWHANDLER_H_ */
