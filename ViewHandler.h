#ifndef VIEWHANDLER_H_
#define VIEWHANDLER_H_

#ifndef TEST_BUILD
#include <ContentFilter.h>
#else
class ViewHandler_test;
#include <test/ViewHandler_test_mock.h>
#endif

#include <TabModel.h>
#include <TreeToListProxyModel.h>

#include <QGuiApplication>
#include <QLoggingCategory>
#include <QObject>
#include <QQuickItem>
#include <QQuickView>
#include <QStandardItemModel>

#include <map>
#include <memory>
#include <mutex>
#include <vector>

class Tab;
class QQuickWebEngineHistory;

/**
 * Class that handles tab tree structure and WebEngineView objects associated with tabs
 * View ID used in here is the same id as generated by database via Tabs object
 */
class ViewHandler : public QObject
{
    Q_OBJECT

public:
    /**
     * Creates ViewHandler object
     * @param _cf reference to ContentFilter class that provides interface for handling script blocking etc.
     * @param _qView shared pointer to the main window QQuickView object
     */
    ViewHandler(ContentFilter* _cf, std::shared_ptr<QQuickView> _qView);

    virtual ~ViewHandler();

public slots:

    /**
     * Initializes ViewHandler. This function should be called after at least one
     * database connection is established. Can be called multiple times, e.g. when
     * new database connection is established, or some connection was lost.
     * @param app reference to application object. Init procedure needs to process events
     */
    bool init(QGuiApplication& app);

    /**
     * Show view allowing modification of script blocking rules for site opened
     * in selected tab
     * @param viewId id of tab / view for which list of blocked script sources will be shown
     */
    void openScriptBlockingView(int viewId);

    /**
     * Enter fullscreen mode
     * @param fullscreen If true application will enter fullscreen mode, if false - the opposite
     */
    void showFullscreen(bool fullscreen = true);


    // deprecated, does not work
    void historyUpdated(int _viewId, QQuickWebEngineHistory* navHistory);

private:
#ifndef TEST_BUILD
    QQuickItem* scriptBlockingView;      /// Pointer to ScriptBlockingView QML object
    QQuickItem* webViewContainer;        /// Pointer to WebViewContainer QML object
    ContentFilter* cf;                   /// Reference to content filtering class
#else
    friend ViewHandler_test;
    db::Tabs_mock tabsDb;
    db::Config_mock configDb;
    db::ScriptBlock_mock sBlockDb;
    QQuickItem_mock* webViewContainer;
    QQuickItem_mock* tabSelector;
    QQuickItem_mock* scriptBlockingView;
    ContentFilter* cf;
#endif

    std::shared_ptr<QQuickView> qView;   /// Smart pointer to main window object

    TabModel tabsModel;                  /// Tree model for holding tab related data
                                         /// (no TreeView yet available)
    QStandardItemModel panelModel;
};

#endif /* VIEWHANDLER_H_ */
